{"mappings":"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","sources":["src/scripts/index.js"],"sourcesContent":["/* eslint-disable no-undef */\nconst startBtn = document.getElementById('start-btn');\nconst board = document.querySelector('.board');\nconst game = document.querySelector('.game');\nconst circles = document.querySelectorAll('.circle');\nconst lines = document.querySelectorAll('.line');\nconst questionCounter = document.getElementById('question-count');\nconst errorCounter = document.getElementById('error-count');\nconst answer = document.getElementById('answer');\nconst questionHtml = document.querySelector('.question');\nconst category = document.getElementById('category');\nconst difficulty = document.getElementById('difficulty');\nconst answers = document.querySelectorAll('.answer');\nconst nextBtn = document.getElementById('next-btn');\nconst victoryMessage = document.querySelector('.victory-message');\nconst gameoverMessage = document.querySelector('.gameover-message');\nconst restartBtn = document.getElementById('restart-btn');\nlet questionNumber = 0;\nlet errorCount = 0;\nlet token, question;\n\n\nstartBtn.addEventListener('click', () => {\n    document.querySelector('.game-intro').style.display = 'none';\n    generateToken().then(token => getQuestion(token));\n});\n\n\nasync function generateToken() {\n    let response = await fetch('https://opentdb.com/api_token.php?command=request');\n    let data = await response.json();\n    token = data.token;\n    return token;\n}\n\n\nasync function getQuestion() {\n    nextBtn.removeEventListener('click', getQuestion);\n\n    if (questionNumber < 5) {\n        let response = await fetch(`https://opentdb.com/api.php?amount=1&type=multiple&difficulty=easy&token=${token}&encode=base64`);\n        let data = await response.json();\n        question = await data.results;\n        displayQuestion(question);\n    } else if (questionNumber < 10) {\n        let response = await fetch(`https://opentdb.com/api.php?amount=1&type=multiple&difficulty=medium&token=${token}&encode=base64`);\n        let data = await response.json();\n        question = await data.results;   \n        displayQuestion(question);\n    } else {\n        let response = await fetch(`https://opentdb.com/api.php?amount=1&type=multiple&difficulty=hard&token=${token}&encode=base64`);\n        let data = await response.json();\n        question = await data.results;\n        displayQuestion(question);\n    }\n}\n\n\nfunction displayQuestion(question) {\n    board.style.display = 'block';\n    game.style.display = 'grid';\n\n    if (questionNumber === 14) nextBtn.style.display = 'none';\n    else nextBtn.style.display = 'inline-block';\n\n    if (questionNumber > 0) {\n        circles[questionNumber-1].classList.remove('circle-active');\n        circles[questionNumber-1].classList.add('circle-completed');\n        lines[questionNumber-1].style.backgroundColor = '#b298dc';\n    }\n\n    circles[questionNumber].classList.add('circle-active');\n    circles[questionNumber].innerHTML = questionNumber + 1;\n    questionCounter.innerHTML = questionNumber + 1;\n\n    questionHtml.innerHTML = Base64.decode(question[0].question);\n    category.innerHTML = Base64.decode(question[0].category);\n    difficulty.innerHTML = Base64.decode(question[0].difficulty);\n\n    let allAnswers = [question[0].correct_answer].concat(question[0].incorrect_answers);\n    let randomNumbers = [0, 1, 2, 3];\n\n    answers[0].innerHTML = Base64.decode(allAnswers[randomNumbers.splice(Math.floor(Math.random() * randomNumbers.length), 1)[0]]).replace(/</g,'&lt;').replace(/>/g,'&gt;');\n    answers[1].innerHTML = Base64.decode(allAnswers[randomNumbers.splice(Math.floor(Math.random() * randomNumbers.length), 1)[0]]).replace(/</g,'&lt;').replace(/>/g,'&gt;');\n    answers[2].innerHTML = Base64.decode(allAnswers[randomNumbers.splice(Math.floor(Math.random() * randomNumbers.length), 1)[0]]).replace(/</g,'&lt;').replace(/>/g,'&gt;');\n    answers[3].innerHTML = Base64.decode(allAnswers[randomNumbers.splice(Math.floor(Math.random() * randomNumbers.length), 1)[0]]).replace(/</g,'&lt;').replace(/>/g,'&gt;');\n\n    answers.forEach(answer => {\n        answer.addEventListener('click', checkAnswer);\n        answer.classList.remove('correct', 'incorrect');\n        answer.classList.add('clickable');\n    });\n\n    nextBtn.classList.add('btn-inactive');\n    nextBtn.removeEventListener('click', getQuestion);\n\n    console.log(Base64.decode(question[0].correct_answer));\n}\n\n\nfunction checkAnswer(element) {\n\n    let correctAnswer = Base64.decode(question[0].correct_answer).replace(/</g,'&lt;').replace(/>/g,'&gt;');\n\n    if (element.target.innerHTML === correctAnswer) {\n        element.target.classList.add('correct');\n        circles[questionNumber].innerHTML = '<i class=\"fas fa-check\"></i>';\n        if (questionNumber < 14) {\n            nextBtn.classList.remove('btn-inactive');\n            answers.forEach(answer => {\n                answer.removeEventListener('click', checkAnswer); \n                answer.classList.remove('clickable');\n            });\n            nextBtn.addEventListener('click', getQuestion);\n        } else if (questionNumber === 14) {\n            setTimeout( () => {\n                circles[questionNumber].classList.remove('circle-active');\n                circles[questionNumber].classList.add('circle-completed');\n                game.style.display = 'none';\n                victoryMessage.style.display = 'block';\n                restartBtn.style.display = 'inline-block';\n                restartBtn.addEventListener('click', restartGame);\n            }, 500);\n        }\n    } else {\n        errorCount++;\n        element.target.classList.add('incorrect');\n        answers.forEach(answer => {\n            answer.removeEventListener('click', checkAnswer);\n            answer.classList.remove('clickable');\n            if (answer.innerHTML === correctAnswer)\n                answer.classList.add('correct');\n        });\n        circles[questionNumber].innerHTML = '<i class=\"fas fa-times\"></i>';\n        errorCounter.innerHTML = errorCount;\n\n        if (errorCount === 1) { \n            answer.innerHTML = 'answer';\n        } else answer.innerHTML = 'answers';\n\n        if (errorCount < 3) {\n            if (questionNumber < 14) {\n                nextBtn.classList.remove('btn-inactive');\n                nextBtn.addEventListener('click', getQuestion);\n            } else if (questionNumber === 14) {\n                setTimeout( () => {\n                    circles[questionNumber].classList.remove('circle-active');\n                    circles[questionNumber].classList.add('circle-completed');\n                    game.style.display = 'none';\n                    victoryMessage.style.display = 'block';\n                    restartBtn.style.display = 'inline-block';\n                    restartBtn.addEventListener('click', restartGame);\n                }, 500);\n                \n            }\n        } else {\n            nextBtn.removeEventListener('click', getQuestion);\n            nextBtn.classList.add('btn-inactive');\n            setTimeout( () => {\n                game.style.display = 'none';\n                gameoverMessage.style.display = 'block';\n                nextBtn.style.display = 'none';\n                restartBtn.style.display = 'inline-block';\n                restartBtn.addEventListener('click', restartGame);\n            }, 500);\n        }\n    }\n\n    if (questionNumber < 14) questionNumber++;\n}\n\n\nfunction restartGame() {\n    questionNumber = 0;\n    errorCount = 0;\n    errorCounter.innerHTML = errorCount;\n    circles.forEach(circle => {\n        circle.classList.remove('circle-active','circle-completed');\n        circle.innerHTML = '';\n    });\n    lines.forEach(line => line.style.backgroundColor = 'rgba(178, 152, 220, 0.4)');\n    victoryMessage.style.display = 'none';\n    gameoverMessage.style.display = 'none';\n    restartBtn.style.display = 'none';\n    restartBtn.removeEventListener('click', restartGame);\n    getQuestion(token);\n}"],"names":["startBtn","document","getElementById","board","querySelector","game","circles","querySelectorAll","lines","questionCounter","errorCounter","answer","questionHtml","category","difficulty","answers","nextBtn","victoryMessage","gameoverMessage","restartBtn","token","question","questionNumber","errorCount","generateToken","response","fetch","data","json","getQuestion","removeEventListener","results","displayQuestion","question1","style","display","classList","remove","add","backgroundColor","innerHTML","Base64","decode","allAnswers","correct_answer","concat","incorrect_answers","randomNumbers","splice","Math","floor","random","length","replace","forEach","answer1","addEventListener","checkAnswer","console","log","element","correctAnswer","target","setTimeout","restartGame","circle","line","then","token1"],"version":3,"file":"index.d09fe84f.js.map"}