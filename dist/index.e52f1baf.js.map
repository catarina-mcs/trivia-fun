{"mappings":"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","sources":["src/scripts/base64.js"],"sourcesContent":["/* eslint-disable no-redeclare */\n/* eslint-disable no-useless-escape */\n/* eslint-disable no-control-regex */\n/* eslint-disable no-undef */\n//\n// THIS FILE IS AUTOMATICALLY GENERATED! DO NOT EDIT BY HAND!\n//\n(function(global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined'\n        ? module.exports = factory()\n        : typeof define === 'function' && define.amd\n            ? define(factory) :\n        // cf. https://github.com/dankogai/js-base64/issues/119\n            (function() {\n            // existing version for noConflict()\n                const _Base64 = global.Base64;\n                const gBase64 = factory();\n                gBase64.noConflict = () => {\n                    global.Base64 = _Base64;\n                    return gBase64;\n                };\n                if (global.Meteor) { // Meteor.js\n                    Base64 = gBase64;\n                }\n                global.Base64 = gBase64;\n            })();\n}((typeof self !== 'undefined' ? self\n    : typeof window !== 'undefined' ? window\n        : typeof global !== 'undefined' ? global\n            : this\n), function() {\n    'use strict';\n\n    /**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\n    const version = '3.6.1';\n    /**\n * @deprecated use lowercase `version`.\n */\n    const VERSION = version;\n    const _hasatob = typeof atob === 'function';\n    const _hasbtoa = typeof btoa === 'function';\n    const _hasBuffer = typeof Buffer === 'function';\n    const _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\n    const _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\n    const b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    const b64chs = [...b64ch];\n    const b64tab = ((a) => {\n        let tab = {};\n        a.forEach((c, i) => tab[c] = i);\n        return tab;\n    })(b64chs);\n    const b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\n    const _fromCC = String.fromCharCode.bind(String);\n    const _U8Afrom = typeof Uint8Array.from === 'function'\n        ? Uint8Array.from.bind(Uint8Array)\n        : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\n    const _mkUriSafe = (src) => src\n        .replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_')\n        .replace(/=+$/m, '');\n    const _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n    /**\n * polyfill version of `btoa`\n */\n    const btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n        let u32, c0, c1, c2, asc = '';\n        const pad = bin.length % 3;\n        for (let i = 0; i < bin.length;) {\n            if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n                throw new TypeError('invalid character found');\n            u32 = (c0 << 16) | (c1 << 8) | c2;\n            asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n        }\n        return pad ? asc.slice(0, pad - 3) + '==='.substring(pad) : asc;\n    };\n    /**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\n    const _btoa = _hasbtoa ? (bin) => btoa(bin)\n        : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n            : btoaPolyfill;\n    const _fromUint8Array = _hasBuffer\n        ? (u8a) => Buffer.from(u8a).toString('base64')\n        : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n            const maxargs = 0x1000;\n            let strs = [];\n            for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n                strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n            }\n            return _btoa(strs.join(''));\n        };\n    /**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 ยง5\n * @returns {string} Base64 string\n */\n    const fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n    // This trick is found broken https://github.com/dankogai/js-base64/issues/130\n    // const utob = (src: string) => unescape(encodeURIComponent(src));\n    // reverting good old fationed regexp\n    const cb_utob = (c) => {\n        if (c.length < 2) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c\n                : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                    : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n        }\n        else {\n            var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n            return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n        }\n    };\n    const re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n    /**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\n    const utob = (u) => u.replace(re_utob, cb_utob);\n    //\n    const _encode = _hasBuffer\n        ? (s) => Buffer.from(s, 'utf8').toString('base64')\n        : _TE\n            ? (s) => _fromUint8Array(_TE.encode(s))\n            : (s) => _btoa(utob(s));\n    /**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\n    const encode = (src, urlsafe = false) => urlsafe\n        ? _mkUriSafe(_encode(src))\n        : _encode(src);\n    /**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 ยง5.\n * @returns {string} Base64 string\n */\n    const encodeURI = (src) => encode(src, true);\n    // This trick is found broken https://github.com/dankogai/js-base64/issues/130\n    // const btou = (src: string) => decodeURIComponent(escape(src));\n    // reverting good old fationed regexp\n    const re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\n    const cb_btou = (cccc) => {\n        switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n        }\n    };\n    /**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\n    const btou = (b) => b.replace(re_btou, cb_btou);\n    /**\n * polyfill version of `atob`\n */\n    const atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n        asc = asc.replace(/\\s+/g, '');\n        if (!b64re.test(asc))\n            throw new TypeError('malformed base64.');\n        asc += '=='.slice(2 - (asc.length & 3));\n        let u24, bin = '', r1, r2;\n        for (let i = 0; i < asc.length;) {\n            u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n            bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n                : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                    : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n        }\n        return bin;\n    };\n    /**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\n    const _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n        : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n            : atobPolyfill;\n    //\n    const _toUint8Array = _hasBuffer\n        ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n        : (a) => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n    /**\n * converts a Base64 string to a Uint8Array.\n */\n    const toUint8Array = (a) => _toUint8Array(_unURI(a));\n    //\n    const _decode = _hasBuffer\n        ? (a) => Buffer.from(a, 'base64').toString('utf8')\n        : _TD\n            ? (a) => _TD.decode(_toUint8Array(a))\n            : (a) => btou(_atob(a));\n    const _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n    /**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\n    const decode = (src) => _decode(_unURI(src));\n    /**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\n    const isValid = (src) => {\n        if (typeof src !== 'string')\n            return false;\n        const s = src.replace(/\\s+/g, '').replace(/=+$/, '');\n        return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n    };\n    //\n    const _noEnum = (v) => {\n        return {\n            value: v, enumerable: false, writable: true, configurable: true\n        };\n    };\n    /**\n * extend String.prototype with relevant methods\n */\n    const extendString = function () {\n        const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n        _add('fromBase64', function () { return decode(this); });\n        _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n        _add('toBase64URI', function () { return encode(this, true); });\n        _add('toBase64URL', function () { return encode(this, true); });\n        _add('toUint8Array', function () { return toUint8Array(this); });\n    };\n    /**\n * extend Uint8Array.prototype with relevant methods\n */\n    const extendUint8Array = function () {\n        const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n        _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n        _add('toBase64URI', function () { return fromUint8Array(this, true); });\n        _add('toBase64URL', function () { return fromUint8Array(this, true); });\n    };\n    /**\n * extend Builtin prototypes with relevant methods\n */\n    const extendBuiltins = () => {\n        extendString();\n        extendUint8Array();\n    };\n    const gBase64 = {\n        version: version,\n        VERSION: VERSION,\n        atob: _atob,\n        atobPolyfill: atobPolyfill,\n        btoa: _btoa,\n        btoaPolyfill: btoaPolyfill,\n        fromBase64: decode,\n        toBase64: encode,\n        encode: encode,\n        encodeURI: encodeURI,\n        encodeURL: encodeURI,\n        utob: utob,\n        btou: btou,\n        decode: decode,\n        isValid: isValid,\n        fromUint8Array: fromUint8Array,\n        toUint8Array: toUint8Array,\n        extendString: extendString,\n        extendUint8Array: extendUint8Array,\n        extendBuiltins: extendBuiltins,\n    };\n\n    //\n    // export Base64 to the namespace\n    //\n    // ES5 is yet to have Object.assign() that may make transpilers unhappy.\n    // gBase64.Base64 = Object.assign({}, gBase64);\n    gBase64.Base64 = {};\n    Object.keys(gBase64).forEach(k => gBase64.Base64[k] = gBase64[k]);\n    return gBase64;\n}));\n\n\n"],"names":["global","factory","exports","module","define","amd","_Base64","Base64","gBase64","noConflict","Meteor","self","window","this","version","_hasatob","atob","_hasbtoa","btoa","_hasBuffer","Buffer","_TD","TextDecoder","undefined","_TE","TextEncoder","b64chs","b64tab","a","tab","forEach","c","i","b64re","_fromCC","String","fromCharCode","bind","_U8Afrom","Uint8Array","from","it","fn","x","Array","prototype","slice","call","map","_mkUriSafe","src","replace","m0","_tidyB64","s","btoaPolyfill","bin","u32","c0","c1","c2","asc","pad","length","charCodeAt","TypeError","substring","_btoa","toString","_fromUint8Array","u8a","strs","l","push","apply","subarray","join","fromUint8Array","urlsafe","cb_utob","cc","re_utob","utob","u","_encode","encode","encodeURI","re_btou","cb_btou","cccc","offset","btou","b","atobPolyfill","test","u24","r1","r2","charAt","_atob","_toUint8Array","toUint8Array","_unURI","_decode","decode","_noEnum","v","value","enumerable","writable","configurable","extendString","_add","name","body","Object","defineProperty","extendUint8Array","VERSION","fromBase64","toBase64","encodeURL","isValid","extendBuiltins","keys","k"],"version":3,"file":"index.e52f1baf.js.map"}